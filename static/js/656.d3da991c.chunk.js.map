{"version":3,"file":"static/js/656.d3da991c.chunk.js","mappings":"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","sources":["components/pages/signin.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Button, Card, Container, Form, InputGroup } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { VerticalSpacer } from \"../sub-components/vertical-spacer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { NOTIFICATION_TYPE } from \"../utils/strings\";\r\nimport { NOTIFICATIONS } from \"../utils/notifications\";\r\n\r\nimport { ROUTE_LINKS } from \"../utils/strings\";\r\n// icons\r\nimport { FcGoogle as GoogleIcon } from \"react-icons/fc\";\r\n\r\n// import { AiOutlineGoogle } from \"react-icons/ai\";\r\nimport { AiOutlineEyeInvisible, AiOutlineEye } from \"react-icons/ai\";\r\n// modals\r\nimport { TERMS_AND_CONDITIONS } from \"../modals/app-modals\";\r\n\r\n// Google\r\nimport { useGoogleLogin } from \"@react-oauth/google\";\r\n\r\n//import TsnCs from \"../../pdf/TsnCs.pdf\";\r\nimport TermsAndConditions from \"../../pdf/TermsAndConditions.pdf\";\r\n\r\n// context\r\nimport {\r\n  REQUEST_GOOGLE_SIGNIN_CONTEXT,\r\n  JOB_NOTIFICATION_CONTEXT,\r\n} from \"../utils/contexts\";\r\n// api\r\nimport api from \"../utils/api\";\r\n// import { Divider } from \"../sub-components/divider\";\r\nimport { JOB_NOTIFICATION_MODAL } from \"../modals/job-notification-modal\";\r\nimport { GET_VERIFIED_JWT_JOB } from \"../utils/jwt-encode-job\";\r\nimport axios from \"axios\";\r\nimport { Divider } from \"../sub-components/divider\";\r\nimport { ErrorHandling } from \"../utils/error-handling\";\r\nimport { AwaitCallBack } from \"../utils/await-callback\";\r\n\r\n// import\r\nimport { motion } from \"framer-motion\";\r\nimport { PAGES_VARIANT } from \"../utils/animation-variants\";\r\nimport {\r\n  SECTION_ANIMATION_DELAY,\r\n  SECTION_ANIMATION_DURATION,\r\n} from \"../utils/numerics\";\r\n\r\n// exort\r\nexport default function SignIn() {\r\n  //variable\r\n  const reloadDocument = false;\r\n  const navigate = useNavigate();\r\n  // refs\r\n  const emailRef = React.useRef();\r\n  const passwordRef = React.useRef();\r\n  //\r\n  const [showJobNotification, setShowJobNotification] = React.useState(false);\r\n  const [showGoogleSigninTsnCs, setShowGoogleSigninTsnCs] =\r\n    React.useState(false);\r\n  const [googleCustomerPhoneNumber, setGoogleCustomerPhoneNumber] =\r\n    React.useState(\"\");\r\n  const [isPasswordVisible, setIsPasswordVisible] = React.useState(false);\r\n  const [passwordBorderColor, setPasswordBorderColor] = React.useState(\"\");\r\n  const [validated, setValidated] = React.useState(false);\r\n  const [disableUI, setDisableUI] = React.useState(false);\r\n  const [notificationType, setNotificationType] = React.useState(\r\n    NOTIFICATION_TYPE.none\r\n  );\r\n  const [leadingText, setLeadingText] = React.useState(\"\");\r\n  const [trailingText, setTrailingText] = React.useState(\"\");\r\n\r\n  // notification function\r\n  const setNotification = (type, leading, trailing) => {\r\n    setNotificationType((_) => type);\r\n    setLeadingText((_) => leading);\r\n    setTrailingText((_) => trailing);\r\n\r\n    // disable\r\n    const disable =\r\n      type === NOTIFICATION_TYPE.loading || type === NOTIFICATION_TYPE.success;\r\n    setDisableUI((_) => disable);\r\n    setPasswordBorderColor((_) => (disable ? \"\" : \"success\"));\r\n  };\r\n\r\n  // testing\r\n  const googleLogin = useGoogleLogin({\r\n    onSuccess: async (r) => await getGoogleProfileInfo(r),\r\n    onError: (e) =>\r\n      setNotification(NOTIFICATION_TYPE.error, \"Oops! error. \", `${e}`),\r\n  });\r\n\r\n  // get full google profile information\r\n  const getGoogleProfileInfo = async (response) => {\r\n    //\r\n    setNotification(NOTIFICATION_TYPE.loading, \"Fetching Info ...\", \"\");\r\n\r\n    const url = `https://www.googleapis.com/oauth2/v3/userinfo?access_token=${response.access_token}`;\r\n    await axios\r\n      .get(url)\r\n      .then(async (r) => {\r\n        // check status code\r\n        if (r.status === 200) {\r\n          setNotification(NOTIFICATION_TYPE.success, \"Awesome.\", \"success\");\r\n          // sleep\r\n          await AwaitCallBack(\r\n            async () =>\r\n              await signinGoogleUser({\r\n                f_name: r.data.given_name,\r\n                s_name: r.data.family_name,\r\n                m_number: googleCustomerPhoneNumber,\r\n                email: r.data.email,\r\n                password: r.data.sub,\r\n                customer: true,\r\n              }),\r\n            2000\r\n          );\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setNotification(NOTIFICATION_TYPE.error, \"Oops! error. \", `${e}`);\r\n      });\r\n  };\r\n\r\n  // function to register new user\r\n  const signinGoogleUser = async (payload) => {\r\n    // set notification\r\n    setNotification(NOTIFICATION_TYPE.loading, \"Signing in ...\", \"\");\r\n\r\n    //\r\n    const url = \"accounts/api/account/signin/google/\";\r\n    await api\r\n      .post(url, payload)\r\n      .then(async (r) => {\r\n        // check status\r\n        if (r.status === 200) {\r\n          // set notification\r\n          setNotification(NOTIFICATION_TYPE.success, \"Awesome.\", \"success\");\r\n          // retrieve tokens\r\n          const signedin_tokens = {\r\n            access: r.data.access,\r\n            refresh: r.data.refresh[0],\r\n          };\r\n          // save to local storage\r\n          saveLocalStorage(signedin_tokens);\r\n          await AwaitCallBack(() => {\r\n            const [verify, __] = GET_VERIFIED_JWT_JOB();\r\n            if (verify) {\r\n              setShowJobNotification((_) => true);\r\n              return;\r\n            }\r\n            // otherwise\r\n            window.location.href = ROUTE_LINKS.home;\r\n          }, 2000);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        ErrorHandling(e, setNotification);\r\n      });\r\n  };\r\n\r\n  // handle color change\r\n  const handleVisibilityBorderColor = (form) => {\r\n    // select all wrong\r\n    const list = form.querySelectorAll(\":invalid\");\r\n    for (let item of list) {\r\n      if (passwordRef.current.id === item.id) {\r\n        setPasswordBorderColor(\"danger\");\r\n        return;\r\n      }\r\n    }\r\n    // otherwise\r\n    setPasswordBorderColor(\"success\");\r\n  };\r\n  // function\r\n  const handleSubmit = async (event) => {\r\n    //\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      handleVisibilityBorderColor(form);\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      setValidated(true);\r\n      return;\r\n    }\r\n\r\n    // once everything is cools\r\n    setPasswordBorderColor((_) => \"success\");\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setValidated(true);\r\n\r\n    // sigin\r\n    await signin({\r\n      email: `${emailRef.current.value}`.toLowerCase(),\r\n      password: passwordRef.current.value,\r\n    });\r\n  };\r\n\r\n  // save to local storage\r\n  const saveLocalStorage = (payload) => {\r\n    localStorage.setItem(\"xcrossinglines_tokens\", JSON.stringify(payload));\r\n  };\r\n\r\n  // login\r\n  const signin = React.useCallback(async (payload) => {\r\n    // set notification\r\n    setNotification(NOTIFICATION_TYPE.loading, \"Signing in ...\", \"\");\r\n\r\n    // set url\r\n    const url = \"accounts/api/account/signin/\";\r\n    await api\r\n      .post(url, payload)\r\n      .then(async (r) => {\r\n        if (r.status === 200) {\r\n          // notify\r\n          setNotification(NOTIFICATION_TYPE.success, \"Awesome.\", \"Success\");\r\n          //tokens\r\n          saveLocalStorage({\r\n            access: r.data.access,\r\n            refresh: r.data.refresh,\r\n          });\r\n          // get job\r\n          await AwaitCallBack(() => {\r\n            const [verify, _] = GET_VERIFIED_JWT_JOB();\r\n            if (verify) {\r\n              setShowJobNotification((_) => true);\r\n              return;\r\n            }\r\n            // otherwise\r\n            window.location.href = ROUTE_LINKS.home;\r\n          }, 2000);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        ErrorHandling(e, setNotification);\r\n      });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [notificationType]);\r\n\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  //\r\n  return (\r\n    <motion.section\r\n      className=\"pb-3\"\r\n      variants={PAGES_VARIANT}\r\n      animate=\"visible\"\r\n      initial=\"hidden\"\r\n      exit=\"exit\"\r\n      transition={{\r\n        duration: SECTION_ANIMATION_DURATION,\r\n        delay: SECTION_ANIMATION_DELAY,\r\n      }}\r\n    >\r\n      <Container className=\"p-0 d-flex flex-column justify-content-center align-items-center\">\r\n        <Card className=\"dropdown__shadow card__section border-0 rounded-0\">\r\n          {/*Form*/}\r\n          <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <Card.Header\r\n              as={\"h3\"}\r\n              className=\" pb-0 border-0 rounded-0 text-center bg-transparent\"\r\n              style={{ fontWeight: \"900\" }}\r\n            >\r\n              Sign In\r\n            </Card.Header>\r\n            <Card.Body>\r\n              {/*NOTIFICATIONS*/}\r\n              {NOTIFICATIONS(notificationType, leadingText, trailingText)}\r\n              {/*NOTIFICATIONS*/}\r\n              {/*CONTINUE WITH GOOGLE BUTTON*/}\r\n              <div\r\n                className={`mb-3 mt-${\r\n                  notificationType === NOTIFICATION_TYPE.none ? \"0\" : \"3\"\r\n                }`}\r\n              >\r\n                <Button\r\n                  variant=\"light\"\r\n                  className=\"fw-bold w-100 rounded-0 d-flex flex-row justify-content-center align-items-center gap-2\"\r\n                  disabled={disableUI}\r\n                  onClick={() => setShowGoogleSigninTsnCs((_) => true)}\r\n                >\r\n                  Continue with google\r\n                  <GoogleIcon size={20} />\r\n                </Button>\r\n              </div>\r\n              {/*CONTINUE WITH GOOGLE BUTTON*/}\r\n              {/*DIVIDER*/}\r\n              <div className=\"d-flex flex-row justify-content-center align-items-center gap-2 my-3\">\r\n                <Divider />\r\n                <span className=\"text-muted px-2\" style={{ fontWeight: 900 }}>\r\n                  Or\r\n                </span>\r\n                <Divider />\r\n              </div>\r\n              {/*DIVIDER*/}\r\n              {/*Email*/}\r\n              <Form.Group className=\"my-3\">\r\n                <Form.FloatingLabel\r\n                  label=\"Email\"\r\n                  className=\"fw-bold\"\r\n                  style={{ color: \"grey\" }}\r\n                >\r\n                  <Form.Control\r\n                    id=\"EmailFormField\"\r\n                    className=\"rounded-0 fw-bold\"\r\n                    placeholder=\"xlines@example.co.za\"\r\n                    disabled={disableUI}\r\n                    required={true}\r\n                    ref={emailRef}\r\n                    type=\"email\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Please enter correct email address to continue\r\n                  </Form.Control.Feedback>\r\n                  <Form.Control.Feedback>Awesome</Form.Control.Feedback>\r\n                </Form.FloatingLabel>\r\n              </Form.Group>\r\n              {/*Email*/}\r\n              {/*password*/}\r\n              <Form.Group>\r\n                <InputGroup className=\"form-outline\" hasValidation={true}>\r\n                  <Form.FloatingLabel\r\n                    label=\"Password\"\r\n                    className=\"fw-bold \"\r\n                    style={{ color: \"grey\" }}\r\n                  >\r\n                    <Form.Control\r\n                      id=\"PasswordFormControl\"\r\n                      className=\"rounded-0 fw-bold border-end-0 \"\r\n                      placeholder=\"xlines@example.co.za\"\r\n                      disabled={disableUI}\r\n                      ref={passwordRef}\r\n                      required={true}\r\n                      type={isPasswordVisible ? \"text\" : \"password\"}\r\n                      onChange={(r) => {\r\n                        const fieldValidity = r.currentTarget.checkValidity();\r\n                        if (validated)\r\n                          setPasswordBorderColor((_) =>\r\n                            fieldValidity ? \"success\" : \"danger\"\r\n                          );\r\n                      }}\r\n                    />\r\n                  </Form.FloatingLabel>\r\n                  <InputGroup.Text\r\n                    className={`rounded-0 bg-transparent border-start-0 border-${passwordBorderColor}`}\r\n                    onClick={() => setIsPasswordVisible((prev) => !prev)}\r\n                  >\r\n                    <div>\r\n                      {isPasswordVisible ? (\r\n                        <AiOutlineEye size={22} color=\"var(--primary-color)\" />\r\n                      ) : (\r\n                        <AiOutlineEyeInvisible\r\n                          size={22}\r\n                          color=\"var(--primary-color)\"\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </InputGroup.Text>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Please enter correct email address to continue\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n              {/*password*/}\r\n              {/*Forgot password*/}\r\n              <div className=\"mt-3 d-flex justify-content-end align-items-center\">\r\n                {disableUI ? (\r\n                  <span className=\"sign__in__links\">Forgot password?</span>\r\n                ) : (\r\n                  <Link\r\n                    className=\"sign__in__links\"\r\n                    to={ROUTE_LINKS.reset_account}\r\n                    reloadDocument={reloadDocument}\r\n                  >\r\n                    Forgot password ?\r\n                  </Link>\r\n                )}\r\n              </div>\r\n              {/*Forgot password*/}\r\n            </Card.Body>\r\n            <Card.Footer className=\"bg-white pt-0 px-0 mx-3 border-0\">\r\n              {/*Divider*/}\r\n              <Divider />\r\n              {/*Divider*/}\r\n              {/*sigin button*/}\r\n              <div className=\"py-3\" style={{ fontWeight: `${14 / 16}rem` }}>\r\n                <span>\r\n                  By signing in you accept our{\" \"}\r\n                  <a\r\n                    className=\"text-dark fw-bold\"\r\n                    href={TermsAndConditions}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                  >\r\n                    terms\r\n                  </a>{\" \"}\r\n                  and{\" \"}\r\n                  <a\r\n                    className=\"text-dark fw-bold\"\r\n                    href={TermsAndConditions}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                  >\r\n                    conditions\r\n                  </a>\r\n                </span>\r\n              </div>\r\n              <Button\r\n                className=\"w-100 rounded-0 text-white fw-bold\"\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                disabled={disableUI}\r\n              >\r\n                Submit\r\n              </Button>\r\n              {/*sigin button*/}\r\n              {/*Sign up page*/}\r\n              <Button\r\n                className=\"w-100 rounded-0 border-0 bg-transparent fw-bold mt-2\"\r\n                variant=\"outline-primary\"\r\n                disabled={disableUI}\r\n                onClick={() => navigate(ROUTE_LINKS.signup)}\r\n              >\r\n                <span className=\"text-muted fw-normal\">or </span>\r\n                Create an account\r\n              </Button>\r\n              {/*Sign up page*/}\r\n            </Card.Footer>\r\n          </Form>\r\n          {/*Form*/}\r\n        </Card>\r\n        {/*Google Sign in Accept Terms and conditions*/}\r\n        <REQUEST_GOOGLE_SIGNIN_CONTEXT.Provider\r\n          value={{\r\n            show: showGoogleSigninTsnCs,\r\n            setShow: setShowGoogleSigninTsnCs,\r\n            setShowGoogle: googleLogin,\r\n            setCustomerPhonenumber: (phoneNumber) =>\r\n              setGoogleCustomerPhoneNumber(() => phoneNumber),\r\n          }}\r\n        >\r\n          <TERMS_AND_CONDITIONS />\r\n        </REQUEST_GOOGLE_SIGNIN_CONTEXT.Provider>\r\n        {/*Google Sign in Accept Terms and conditions*/}\r\n        {/*Job Notification Modal*/}\r\n        <JOB_NOTIFICATION_CONTEXT.Provider\r\n          value={{\r\n            show: showJobNotification,\r\n            setShow: setShowJobNotification,\r\n          }}\r\n        >\r\n          <JOB_NOTIFICATION_MODAL />\r\n        </JOB_NOTIFICATION_CONTEXT.Provider>\r\n        {/*Job Notification Modal*/}\r\n      </Container>\r\n      <VerticalSpacer height={`${window.innerHeight / 2}px`} />\r\n    </motion.section>\r\n  );\r\n}\r\n"],"names":["SignIn","navigate","useNavigate","emailRef","React","passwordRef","showJobNotification","setShowJobNotification","showGoogleSigninTsnCs","setShowGoogleSigninTsnCs","googleCustomerPhoneNumber","setGoogleCustomerPhoneNumber","isPasswordVisible","setIsPasswordVisible","passwordBorderColor","setPasswordBorderColor","validated","setValidated","disableUI","setDisableUI","notificationType","setNotificationType","NOTIFICATION_TYPE","leadingText","setLeadingText","trailingText","setTrailingText","setNotification","type","leading","trailing","_","disable","googleLogin","useGoogleLogin","onSuccess","async","getGoogleProfileInfo","r","onError","e","concat","url","response","access_token","axios","then","status","AwaitCallBack","signinGoogleUser","f_name","data","given_name","s_name","family_name","m_number","email","password","sub","customer","catch","api","payload","signedin_tokens","access","refresh","saveLocalStorage","verify","__","GET_VERIFIED_JWT_JOB","window","location","href","ROUTE_LINKS","ErrorHandling","localStorage","setItem","JSON","stringify","signin","scrollTo","_jsxs","motion","className","variants","PAGES_VARIANT","animate","initial","exit","transition","duration","SECTION_ANIMATION_DURATION","delay","SECTION_ANIMATION_DELAY","children","Container","_jsx","Card","Form","noValidate","onSubmit","form","event","currentTarget","checkValidity","list","querySelectorAll","item","current","id","handleVisibilityBorderColor","preventDefault","stopPropagation","value","toLowerCase","as","style","fontWeight","NOTIFICATIONS","Button","variant","disabled","onClick","GoogleIcon","size","Divider","label","color","placeholder","required","ref","InputGroup","hasValidation","onChange","fieldValidity","prev","AiOutlineEye","AiOutlineEyeInvisible","Link","to","reloadDocument","TermsAndConditions","target","rel","REQUEST_GOOGLE_SIGNIN_CONTEXT","show","setShow","setShowGoogle","setCustomerPhonenumber","phoneNumber","TERMS_AND_CONDITIONS","JOB_NOTIFICATION_CONTEXT","JOB_NOTIFICATION_MODAL","VerticalSpacer","height","innerHeight"],"sourceRoot":""}